{"version":3,"sources":["LoginStore.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAI,IAAI,QAAQ,QAAR,CAAR;;AAEA,IAAM,aAAa,iBAAO,WAAP,CAAmB;AACpC,eAAa,KADuB;;AAGpC,YAAU,EAH0B;;AAKpC,mBAAiB,EALmB;;AAOpC,sBAAoB,EAPgB;;AASpC,oCAToC;;AAWpC,QAXoC,oBAW5B;AACN,MAAE,IAAF,CAAO;AACL,WAAK,4BADA;AAEL,cAAQ,KAFH;AAGL,eAAS,iBAAC,IAAD,EAAS;AAChB,8BAAQ,UAAR,CAAmB,IAAnB;AACA,YAAI,KAAK,KAAL,IAAY,IAAhB,EAAqB;AACnB,iCAAc,GAAd,CAAkB,KAAK,QAAvB;AACD;AACD,+BAAc,GAAd,CAAkB,KAAK,QAAvB;AACD,OATI;AAUL,aAAO,iBAAK;AACV,cAAM,aAAN;AACD;AAZI,KAAP;AAcD,GA1BmC;AA4BpC,WA5BoC,uBA4BzB;AACT,MAAE,IAAF,CAAO;AACL,WAAK,gCADA;AAEL,cAAQ,KAFH;AAGL,eAAS,iBAAC,IAAD,EAAS;AAChB,8BAAQ,UAAR,CAAmB,IAAnB;AACD,OALI;AAML,aAAO,iBAAK;AACV,cAAM,aAAN;AACD;AARI,KAAP;AAUD,GAvCmC;AAyCpC,SAzCoC,mBAyC3B,QAzC2B,EAyCjB,QAzCiB,EAyCR;AAC1B,MAAE,IAAF,CAAO;AACL,WAAK,6BADA;AAEL,cAAQ,MAFH;AAGL,YAAM,EAAC,UAAU,QAAX,EAAqB,UAAU,QAA/B,EAHD;AAIL,eAAS,iBAAC,IAAD,EAAS;AAChB,oCAAe,IAAf,CAAoB,GAApB;AACD,OANI;AAOL,aAAO,iBAAK;AACV,cAAM,WAAN;AACD;AATI,KAAP;AAWD,GArDmC;AAuDpC,YAvDoC,sBAuDzB,QAvDyB,EAuDf,QAvDe,EAuDN;AAAA;;AAC5B,MAAE,IAAF,CAAO;AACL,WAAK,gCADA;AAEL,cAAQ,MAFH;AAGL,YAAM;AACJ,kBAAU,QADN;AAEJ,kBAAU;AAFN,OAHD;AAOL,eAAS,mBAAK;AACZ,oCAAe,IAAf,CAAoB,GAApB;AACD,OATI;AAUL,aAAO,eAAC,IAAD,EAAS;AACd,YAAI,aAAa,KAAK,YAAtB;AACA,YAAI,cAAc,UAAlB,EAA8B;AAC5B,gBAAK,OAAL,CAAa,EAAC,QAAQ,OAAT,EAAb;AACD,SAFD,MAEO,IAAI,cAAc,OAAlB,EAA2B;AAChC,gBAAK,OAAL,CAAa,EAAC,QAAQ,QAAT,EAAb;AACD;AACF;AAjBI,KAAP;AAmBD,GA3EmC;AA6EpC,UA7EoC,sBA6EzB;AACT,MAAE,IAAF,CAAO;AACL,WAAK,8BADA;AAEL,cAAQ,KAFH;AAGL,eAAS,iBAAC,IAAD,EAAS;AAChB,8BAAQ,UAAR,CAAmB,IAAnB;AACA,+BAAc,GAAd,CAAkB,KAAK,QAAvB;AACD,OANI;AAOL,cAAQ,kBAAK;AACX,cAAM,gBAAN;AACD;AATI,KAAP;AAWD,GAzFmC;AA2FpC,iBA3FoC,6BA2FlB;AACf,SAAK,OAAL,CAAa,EAAC,QAAO,EAAR,EAAb;AACF,GA7FmC;AA+FpC,cA/FoC,wBA+FvB,IA/FuB,EA+FlB;AAChB,SAAK,WAAL,GAAmB,KAAK,KAAxB;AACA,SAAK,QAAL,GAAgB,KAAK,QAArB;AACA,SAAK,OAAL,CAAa;AACX,mBAAY,KAAK,WADN;AAEX,gBAAS,KAAK;AAFH,KAAb;AAID;AAtGmC,CAAnB,CAAnB;;kBA0Ge,U","file":"LoginStore-compiled.js","sourcesContent":["import reflux from 'reflux';\nimport actions from '../actions/LoginAction';\nimport {browserHistory} from 'react-router';\nimport socket_action from '../actions/SocketAction';\n\nlet $ = require('jquery');\n\nconst LoginStore = reflux.createStore({\n  login_state: false,\n\n  username: '',\n\n  login_error_msg: '',\n\n  register_error_msg: '',\n\n  listenables: actions,\n\n  onInit(){\n    $.ajax({\n      url: 'http://localhost:3000/init',\n      method: 'GET',\n      success: (data)=> {\n        actions.triggerall(data);\n        if (data.isNew==true){\n          socket_action.new(data.username);\n        }\n        socket_action.all(data.username);\n      },\n      error: ()=> {\n        alert('获取信息失败，请重试!');\n      }\n    });\n  },\n\n  onAlluser(){\n    $.ajax({\n      url: 'http://localhost:3000/all-user',\n      method: 'GET',\n      success: (data)=> {\n        actions.triggerall(data);\n      },\n      error: ()=> {\n        alert('获取信息失败，请重试!');\n      }\n    });\n  },\n\n  onLogin (username, password){\n    $.ajax({\n      url: 'http://localhost:3000/login',\n      method: 'POST',\n      data: {username: username, password: password},\n      success: (data)=> {\n        browserHistory.push('/')\n      },\n      error: ()=> {\n        alert('登录失败，请重试!');\n      }\n    });\n  },\n\n  onRegister(username, password){\n    $.ajax({\n      url: 'http://localhost:3000/register',\n      method: 'POST',\n      data: {\n        username: username,\n        password: password\n      },\n      success: ()=> {\n        browserHistory.push('/')\n      },\n      error: (data)=> {\n        var errMessage = data.responseText;\n        if (errMessage == 'wrongful') {\n          this.trigger({errMsg: '输入不合法'})\n        } else if (errMessage == 'exist') {\n          this.trigger({errMsg: '用户名已存在'})\n        }\n      }\n    });\n  },\n\n  onLogout (){\n    $.ajax({\n      url: 'http://localhost:3000/logout',\n      method: 'GET',\n      success: (data)=> {\n        actions.triggerall(data);\n        socket_action.all(data.username);\n      },\n      failed: ()=> {\n        alert('logout failed!');\n      }\n    });\n  },\n\n  onRegistererror (){\n     this.trigger({errMsg:''});\n  },\n\n  onTriggerall(data){\n    this.login_state = data.login;\n    this.username = data.username;\n    this.trigger({\n      login_state:this.login_state,\n      username:this.username\n    });\n  }\n\n});\n\nexport default LoginStore;\n"]}